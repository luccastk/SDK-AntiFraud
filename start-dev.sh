#!/bin/bash

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir com cores
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}$1${NC}"
}

# Fun√ß√£o para verificar se um comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o para verificar se uma porta est√° em uso
port_in_use() {
    lsof -i :$1 >/dev/null 2>&1
}

# Fun√ß√£o para aguardar uma porta ficar dispon√≠vel
wait_for_port() {
    local port=$1
    local service=$2
    local timeout=30
    local count=0
    
    print_status "Aguardando $service na porta $port..."
    while port_in_use $port && [ $count -lt $timeout ]; do
        sleep 1
        count=$((count + 1))
        echo -n "."
    done
    echo ""
    
    if [ $count -eq $timeout ]; then
        print_error "Timeout aguardando $service na porta $port"
        return 1
    fi
    return 0
}

# Fun√ß√£o para matar processos em portas espec√≠ficas
kill_port() {
    local port=$1
    local pids=$(lsof -ti :$port)
    if [ ! -z "$pids" ]; then
        print_warning "Matando processos na porta $port: $pids"
        echo $pids | xargs kill -9 2>/dev/null || true
        sleep 2
    fi
}

print_header "üöÄ SDK AntiFraud - Ambiente de Desenvolvimento Ubuntu"
print_header "=================================================="

# Verificar depend√™ncias do sistema
print_status "Verificando depend√™ncias do sistema..."

if ! command_exists node; then
    print_error "Node.js n√£o encontrado. Instale com: sudo apt update && sudo apt install nodejs npm"
    exit 1
fi

if ! command_exists npm; then
    print_error "npm n√£o encontrado. Instale com: sudo apt update && sudo apt install npm"
    exit 1
fi

if ! command_exists java; then
    print_error "Java n√£o encontrado. Instale com: sudo apt update && sudo apt install openjdk-17-jdk"
    exit 1
fi

print_success "Depend√™ncias do sistema verificadas"

# Verificar vers√µes
NODE_VERSION=$(node --version)
NPM_VERSION=$(npm --version)
JAVA_VERSION=$(java -version 2>&1 | head -n 1)

print_status "Node.js: $NODE_VERSION"
print_status "npm: $NPM_VERSION"
print_status "Java: $JAVA_VERSION"

# Limpar portas se necess√°rio
print_status "Verificando portas..."
kill_port 3000
kill_port 8080

# Verificar e instalar depend√™ncias do SDK
print_status "Verificando depend√™ncias do SDK..."
if [ ! -d "sdk-antifraude/node_modules" ]; then
    print_status "Instalando depend√™ncias do SDK..."
    cd sdk-antifraude
    npm install
    if [ $? -ne 0 ]; then
        print_error "Falha ao instalar depend√™ncias do SDK"
        exit 1
    fi
    cd ..
    print_success "Depend√™ncias do SDK instaladas"
else
    print_success "Depend√™ncias do SDK j√° instaladas"
fi

# Verificar e instalar depend√™ncias da aplica√ß√£o de exemplo
print_status "Verificando depend√™ncias da aplica√ß√£o de exemplo..."
if [ ! -d "ecommerce-app/node_modules" ]; then
    print_status "Instalando depend√™ncias da aplica√ß√£o de exemplo..."
    cd ecommerce-app
    npm install
    if [ $? -ne 0 ]; then
        print_error "Falha ao instalar depend√™ncias da aplica√ß√£o de exemplo"
        exit 1
    fi
    cd ..
    print_success "Depend√™ncias da aplica√ß√£o de exemplo instaladas"
else
    print_success "Depend√™ncias da aplica√ß√£o de exemplo j√° instaladas"
fi

# Build do SDK
print_status "Compilando SDK..."
cd sdk-antifraude
npm run build
if [ $? -ne 0 ]; then
    print_error "Falha ao compilar o SDK"
    exit 1
fi
cd ..
print_success "SDK compilado com sucesso"

# Verificar se o Gradle wrapper tem permiss√£o de execu√ß√£o
print_status "Configurando Gradle wrapper..."
chmod +x kotlin-api/gradlew
print_success "Gradle wrapper configurado"

print_header "üéØ Ambiente configurado com sucesso!"
print_header "=================================================="

# Fun√ß√£o para iniciar servi√ßos
start_services() {
    print_header "üöÄ Iniciando servi√ßos..."
    
    # Iniciar backend Kotlin em background
    print_status "Iniciando backend Kotlin (porta 8080)..."
    cd kotlin-api
    ./gradlew bootRun > ../kotlin-api.log 2>&1 &
    KOTLIN_PID=$!
    cd ..
    
    # Aguardar backend ficar dispon√≠vel
    if wait_for_port 8080 "Backend Kotlin"; then
        print_success "Backend Kotlin iniciado (PID: $KOTLIN_PID)"
    else
        print_error "Falha ao iniciar Backend Kotlin"
        return 1
    fi
    
    # Iniciar aplica√ß√£o Node.js em background
    print_status "Iniciando aplica√ß√£o Node.js (porta 3000)..."
    cd ecommerce-app
    npm start > ../ecommerce-app.log 2>&1 &
    NODE_PID=$!
    cd ..
    
    # Aguardar aplica√ß√£o ficar dispon√≠vel
    if wait_for_port 3000 "Aplica√ß√£o Node.js"; then
        print_success "Aplica√ß√£o Node.js iniciada (PID: $NODE_PID)"
    else
        print_error "Falha ao iniciar Aplica√ß√£o Node.js"
        return 1
    fi
    
    print_header "‚úÖ Todos os servi√ßos iniciados!"
    print_header "=================================================="
    echo -e "${CYAN}üìä URLs dispon√≠veis:${NC}"
    echo -e "  ${GREEN}‚Ä¢ Backend API:${NC} http://localhost:8080"
    echo -e "  ${GREEN}‚Ä¢ Aplica√ß√£o Web:${NC} http://localhost:3000"
    echo -e "  ${GREEN}‚Ä¢ Interface Demo:${NC} http://localhost:3000/index.html"
    echo ""
    echo -e "${CYAN}üéØ Teste as rotas:${NC}"
    echo -e "  ${YELLOW}‚Ä¢ GET /checkout-ip${NC} (verifica√ß√£o de IP)"
    echo -e "  ${YELLOW}‚Ä¢ GET /checkout-advanced${NC} (verifica√ß√£o avan√ßada)"
    echo -e "  ${YELLOW}‚Ä¢ POST /api/verify${NC} (verifica√ß√£o manual)"
    echo ""
    echo -e "${CYAN}üìù Logs:${NC}"
    echo -e "  ${YELLOW}‚Ä¢ Backend:${NC} tail -f kotlin-api.log"
    echo -e "  ${YELLOW}‚Ä¢ Frontend:${NC} tail -f ecommerce-app.log"
    echo ""
    echo -e "${CYAN}üõë Para parar os servi√ßos:${NC}"
    echo -e "  ${YELLOW}‚Ä¢ kill $KOTLIN_PID $NODE_PID${NC}"
    echo -e "  ${YELLOW}‚Ä¢ ou use Ctrl+C${NC}"
    
    # Salvar PIDs para cleanup
    echo "$KOTLIN_PID $NODE_PID" > .pids
    
    # Fun√ß√£o de cleanup
    cleanup() {
        print_status "Parando servi√ßos..."
        if [ -f .pids ]; then
            read KOTLIN_PID NODE_PID < .pids
            kill $KOTLIN_PID $NODE_PID 2>/dev/null || true
            rm .pids
        fi
        kill_port 3000
        kill_port 8080
        print_success "Servi√ßos parados"
        exit 0
    }
    
    # Capturar Ctrl+C
    trap cleanup SIGINT SIGTERM
    
    # Manter script rodando
    print_status "Pressione Ctrl+C para parar os servi√ßos..."
    while true; do
        sleep 1
    done
}

# Menu interativo
print_header "Escolha uma op√ß√£o:"
echo "1) Iniciar todos os servi√ßos automaticamente"
echo "2) Apenas configurar ambiente (n√£o iniciar servi√ßos)"
echo "3) Verificar status dos servi√ßos"
echo "4) Parar todos os servi√ßos"
echo "5) Sair"

read -p "Digite sua escolha (1-5): " choice

case $choice in
    1)
        start_services
        ;;
    2)
        print_success "Ambiente configurado! Para iniciar os servi√ßos:"
        echo "  Backend: cd kotlin-api && ./gradlew bootRun"
        echo "  Frontend: cd ecommerce-app && npm start"
        ;;
    3)
        print_status "Verificando status dos servi√ßos..."
        if port_in_use 8080; then
            print_success "Backend Kotlin est√° rodando na porta 8080"
        else
            print_warning "Backend Kotlin n√£o est√° rodando"
        fi
        
        if port_in_use 3000; then
            print_success "Aplica√ß√£o Node.js est√° rodando na porta 3000"
        else
            print_warning "Aplica√ß√£o Node.js n√£o est√° rodando"
        fi
        ;;
    4)
        print_status "Parando todos os servi√ßos..."
        kill_port 3000
        kill_port 8080
        if [ -f .pids ]; then
            read KOTLIN_PID NODE_PID < .pids
            kill $KOTLIN_PID $NODE_PID 2>/dev/null || true
            rm .pids
        fi
        print_success "Servi√ßos parados"
        ;;
    5)
        print_success "Saindo..."
        exit 0
        ;;
    *)
        print_error "Op√ß√£o inv√°lida"
        exit 1
        ;;
esac
