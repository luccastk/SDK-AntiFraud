@echo off
setlocal enabledelayedexpansion

REM SDK AntiFraud - Ambiente de Desenvolvimento Windows (Batch)
REM Execute como: start-dev.bat

title SDK AntiFraud - Ambiente de Desenvolvimento

echo.
echo ==================================================
echo ðŸš€ SDK AntiFraud - Ambiente de Desenvolvimento Windows
echo ==================================================
echo.

REM Verificar dependÃªncias do sistema
echo [INFO] Verificando dependÃªncias do sistema...

where node >nul 2>&1
if %errorlevel% neq 0 (
    echo [ERROR] Node.js nÃ£o encontrado. Execute: install-deps-windows.ps1
    pause
    exit /b 1
)

where npm >nul 2>&1
if %errorlevel% neq 0 (
    echo [ERROR] npm nÃ£o encontrado. Execute: install-deps-windows.ps1
    pause
    exit /b 1
)

where java >nul 2>&1
if %errorlevel% neq 0 (
    echo [ERROR] Java nÃ£o encontrado. Execute: install-deps-windows.ps1
    pause
    exit /b 1
)

echo [SUCCESS] DependÃªncias do sistema verificadas

REM Verificar versÃµes
for /f "tokens=*" %%i in ('node --version') do set NODE_VERSION=%%i
for /f "tokens=*" %%i in ('npm --version') do set NPM_VERSION=%%i
for /f "tokens=*" %%i in ('java -version 2^>^&1 ^| findstr /r "version"') do set JAVA_VERSION=%%i

echo [INFO] Node.js: %NODE_VERSION%
echo [INFO] npm: %NPM_VERSION%
echo [INFO] Java: %JAVA_VERSION%

REM Limpar portas se necessÃ¡rio
echo [INFO] Verificando portas...
call :kill_port 3000
call :kill_port 8080

REM Verificar e instalar dependÃªncias do SDK
echo [INFO] Verificando dependÃªncias do SDK...
if not exist "sdk-antifraude\node_modules" (
    echo [INFO] Instalando dependÃªncias do SDK...
    cd sdk-antifraude
    call npm install
    if %errorlevel% neq 0 (
        echo [ERROR] Falha ao instalar dependÃªncias do SDK
        pause
        exit /b 1
    )
    cd ..
    echo [SUCCESS] DependÃªncias do SDK instaladas
) else (
    echo [SUCCESS] DependÃªncias do SDK jÃ¡ instaladas
)

REM Verificar e instalar dependÃªncias da aplicaÃ§Ã£o de exemplo
echo [INFO] Verificando dependÃªncias da aplicaÃ§Ã£o de exemplo...
if not exist "ecommerce-app\node_modules" (
    echo [INFO] Instalando dependÃªncias da aplicaÃ§Ã£o de exemplo...
    cd ecommerce-app
    call npm install
    if %errorlevel% neq 0 (
        echo [ERROR] Falha ao instalar dependÃªncias da aplicaÃ§Ã£o de exemplo
        pause
        exit /b 1
    )
    cd ..
    echo [SUCCESS] DependÃªncias da aplicaÃ§Ã£o de exemplo instaladas
) else (
    echo [SUCCESS] DependÃªncias da aplicaÃ§Ã£o de exemplo jÃ¡ instaladas
)

REM Build do SDK
echo [INFO] Compilando SDK...
cd sdk-antifraude
call npm run build
if %errorlevel% neq 0 (
    echo [ERROR] Falha ao compilar o SDK
    pause
    exit /b 1
)
cd ..
echo [SUCCESS] SDK compilado com sucesso

REM Verificar se o Gradle wrapper existe
echo [INFO] Configurando Gradle wrapper...
if exist "kotlin-api\gradlew.bat" (
    echo [SUCCESS] Gradle wrapper configurado
) else (
    echo [WARNING] Gradle wrapper nÃ£o encontrado
)

echo.
echo ==================================================
echo ðŸŽ¯ Ambiente configurado com sucesso!
echo ==================================================
echo.

REM Menu interativo
:menu
echo Escolha uma opÃ§Ã£o:
echo 1) Iniciar todos os serviÃ§os automaticamente
echo 2) Apenas configurar ambiente (nÃ£o iniciar serviÃ§os)
echo 3) Verificar status dos serviÃ§os
echo 4) Parar todos os serviÃ§os
echo 5) Sair
echo.
set /p choice="Digite sua escolha (1-5): "

if "%choice%"=="1" goto start_services
if "%choice%"=="2" goto config_only
if "%choice%"=="3" goto check_status
if "%choice%"=="4" goto stop_services
if "%choice%"=="5" goto exit_script
echo [ERROR] OpÃ§Ã£o invÃ¡lida
goto menu

:start_services
echo.
echo ==================================================
echo ðŸš€ Iniciando serviÃ§os...
echo ==================================================

echo [INFO] Iniciando backend Kotlin (porta 8080)...
cd kotlin-api
start "Backend Kotlin" /min cmd /c "gradlew.bat bootRun"
cd ..
echo [SUCCESS] Backend Kotlin iniciado

echo [INFO] Aguardando backend ficar disponÃ­vel...
timeout /t 10 /nobreak >nul

echo [INFO] Iniciando aplicaÃ§Ã£o Node.js (porta 3000)...
cd ecommerce-app
start "Frontend Node.js" /min cmd /c "npm start"
cd ..
echo [SUCCESS] AplicaÃ§Ã£o Node.js iniciada

echo.
echo ==================================================
echo âœ… Todos os serviÃ§os iniciados!
echo ==================================================
echo.
echo ðŸ“Š URLs disponÃ­veis:
echo   â€¢ Backend API: http://localhost:8080
echo   â€¢ AplicaÃ§Ã£o Web: http://localhost:3000
echo   â€¢ Interface Demo: http://localhost:3000/index.html
echo.
echo ðŸŽ¯ Teste as rotas:
echo   â€¢ GET /checkout-ip (verificaÃ§Ã£o de IP)
echo   â€¢ GET /checkout-advanced (verificaÃ§Ã£o avanÃ§ada)
echo   â€¢ POST /api/verify (verificaÃ§Ã£o manual)
echo.
echo ðŸ›‘ Para parar os serviÃ§os:
echo   â€¢ Feche as janelas dos serviÃ§os
echo   â€¢ Ou execute: stop-services.bat
echo.
pause
goto menu

:config_only
echo.
echo [SUCCESS] Ambiente configurado! Para iniciar os serviÃ§os:
echo   Backend: cd kotlin-api ^&^& gradlew.bat bootRun
echo   Frontend: cd ecommerce-app ^&^& npm start
echo.
pause
goto menu

:check_status
echo.
echo [INFO] Verificando status dos serviÃ§os...
call :check_port 8080 "Backend Kotlin"
call :check_port 3000 "AplicaÃ§Ã£o Node.js"
echo.
pause
goto menu

:stop_services
echo.
echo [INFO] Parando todos os serviÃ§os...
call :kill_port 3000
call :kill_port 8080
echo [SUCCESS] ServiÃ§os parados
echo.
pause
goto menu

:exit_script
echo.
echo [SUCCESS] Saindo...
exit /b 0

REM FunÃ§Ã£o para verificar se uma porta estÃ¡ em uso
:check_port
set port=%1
set service=%2
netstat -an | findstr ":%port% " >nul
if %errorlevel% equ 0 (
    echo [SUCCESS] %service% estÃ¡ rodando na porta %port%
) else (
    echo [WARNING] %service% nÃ£o estÃ¡ rodando
)
goto :eof

REM FunÃ§Ã£o para matar processos em uma porta
:kill_port
set port=%1
for /f "tokens=5" %%a in ('netstat -ano ^| findstr ":%port% "') do (
    if not "%%a"=="0" (
        echo [WARNING] Matando processo %%a na porta %port%
        taskkill /PID %%a /F >nul 2>&1
    )
)
goto :eof
