# SDK AntiFraud - Makefile para Windows
# Execute como: make -f Makefile.windows [comando]

.PHONY: help install build start stop clean test lint format

# Variáveis
SDK_DIR := sdk-antifraude
KOTLIN_DIR := kotlin-api
ECOMMERCE_DIR := ecommerce-app

help: ## Mostra esta ajuda
	@echo SDK AntiFraud - Comandos Disponíveis (Windows)
	@echo ==================================
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "%-20s %s\n", $$1, $$2}'

install: ## Instala todas as dependências
	@echo Instalando dependências...
	@cd $(SDK_DIR) && npm install
	@cd $(ECOMMERCE_DIR) && npm install
	@echo Dependências instaladas!

build: ## Compila o SDK
	@echo Compilando SDK...
	@cd $(SDK_DIR) && npm run build
	@echo SDK compilado!

build-kotlin: ## Compila o backend Kotlin
	@echo Compilando backend Kotlin...
	@cd $(KOTLIN_DIR) && gradlew.bat build
	@echo Backend Kotlin compilado!

start-backend: ## Inicia o backend Kotlin
	@echo Iniciando backend Kotlin...
	@cd $(KOTLIN_DIR) && start "Backend Kotlin" /min cmd /c "gradlew.bat bootRun"

start-frontend: ## Inicia a aplicação Node.js
	@echo Iniciando aplicação Node.js...
	@cd $(ECOMMERCE_DIR) && start "Frontend Node.js" /min cmd /c "npm start"

start: ## Inicia todos os serviços
	@echo Iniciando todos os serviços...
	@make -f Makefile.windows start-backend
	@timeout /t 10 /nobreak >nul
	@make -f Makefile.windows start-frontend

start-dev: ## Inicia ambiente de desenvolvimento completo
	@echo Iniciando ambiente de desenvolvimento...
	@powershell -ExecutionPolicy Bypass -File start-dev.ps1

stop: ## Para todos os serviços
	@echo Parando serviços...
	@powershell -ExecutionPolicy Bypass -File stop-services.ps1

clean: ## Limpa arquivos temporários
	@echo Limpando arquivos temporários...
	@cd $(SDK_DIR) && npm run clean
	@cd $(KOTLIN_DIR) && gradlew.bat clean
	@del /q *.log 2>nul
	@del /q .pids.json 2>nul
	@echo Limpeza concluída!

test: ## Executa testes
	@echo Executando testes...
	@cd $(SDK_DIR) && npm test
	@cd $(KOTLIN_DIR) && gradlew.bat test
	@echo Testes concluídos!

lint: ## Executa linting
	@echo Executando linting...
	@cd $(SDK_DIR) && npm run lint || echo Linting não configurado
	@echo Linting concluído!

format: ## Formata código
	@echo Formatando código...
	@cd $(SDK_DIR) && npm run format || echo Format não configurado
	@echo Formatação concluída!

status: ## Verifica status dos serviços
	@echo Verificando status dos serviços...
	@netstat -an | findstr ":8080 " >nul && echo ✓ Backend Kotlin está rodando na porta 8080 || echo ✗ Backend Kotlin não está rodando
	@netstat -an | findstr ":3000 " >nul && echo ✓ Aplicação Node.js está rodando na porta 3000 || echo ✗ Aplicação Node.js não está rodando

logs: ## Mostra logs dos serviços
	@echo Logs dos serviços:
	@echo Backend Kotlin:
	@type kotlin-api.log 2>nul || echo Arquivo de log não encontrado
	@echo Aplicação Node.js:
	@type ecommerce-app.log 2>nul || echo Arquivo de log não encontrado

dev: install build start-dev ## Setup completo de desenvolvimento

quick-start: build start ## Início rápido (assume dependências instaladas)

# Comandos específicos para desenvolvimento
watch-sdk: ## Observa mudanças no SDK e recompila
	@echo Observando mudanças no SDK...
	@cd $(SDK_DIR) && npm run dev

watch-kotlin: ## Observa mudanças no Kotlin e recompila
	@echo Observando mudanças no Kotlin...
	@cd $(KOTLIN_DIR) && gradlew.bat bootRun --continuous

# Comandos de utilidade
ports: ## Mostra portas em uso
	@echo Portas em uso:
	@netstat -an | findstr ":3000\|:8080"

kill-ports: ## Mata processos nas portas 3000 e 8080
	@echo Matando processos nas portas 3000 e 8080...
	@for /f "tokens=5" %%a in ('netstat -ano ^| findstr ":3000 "') do taskkill /PID %%a /F >nul 2>&1
	@for /f "tokens=5" %%a in ('netstat -ano ^| findstr ":8080 "') do taskkill /PID %%a /F >nul 2>&1
	@echo Processos finalizados!

# Comandos de instalação de dependências do sistema
install-deps: ## Instala dependências do sistema (Windows)
	@echo Instalando dependências do sistema...
	@powershell -ExecutionPolicy Bypass -File install-deps-windows.ps1

# Comandos de documentação
docs: ## Gera documentação
	@echo Gerando documentação...
	@echo Documentação disponível em README.md

# Comandos de deploy (futuro)
deploy-staging: ## Deploy para staging
	@echo Deploy para staging não implementado

deploy-prod: ## Deploy para produção
	@echo Deploy para produção não implementado

# Comando padrão
.DEFAULT_GOAL := help
